input:
  # zarr is also supported
  # the zarr data are under /ec/res4/scratch/syma/era5/o160/zarr/[pl | sfc]
  format: zarr
  resolution: o96
  training:
    basedir: /ec/res4/scratch/pamc/GNN/ERA5/
    filename: panguweather-{resolution}-1979-2015.zarr
  validation:
    basedir: /ec/res4/scratch/pamc/GNN/ERA5/
    filename: panguweather-{resolution}-2016-2018.zarr
  test:
    basedir: 
    filename:
  prediction:
    basedir: 
    filename:
  pl:
    levels: 13
  # features that are not part of the forecast state
  # these are presumed to be located at the "end" of the flattened (bs, latlon, nvar) input tensor
  num-features: 90
  num-aux-features: 0  # all 2D fields
  loss-scaling-pl:
    - 1
    - 1
    - 0.5
    - 0.33
    - 0.025
    - 1
  loss-scaling-sfc:
    - 1
    - 1
    - 1
    - 1
    - 1
    - 1
    - 1
    - 1
    - 1
    - 1
    - 1
    - 1

###################
#  OUTPUT BLOCK
###################
output:
  basedir: /ec/res4/scratch/pamc/GNN/ERA5/{resolution}/
  logging:
    log-dir: logs
    log-interval: 250
  checkpoints:
    ckpt-dir: checkpoints
  model:
    save-top-k: 5
    checkpoint-filename: "gnn-era5-{resolution}-ckpt-{epoch:02d}-{val_wmse:.3f}"
  plots:
    plot-dir: plots

###################
#  GRAPH BLOCK
###################
graph:
  data-basedir: /ec/res4/hpcperm/pamc/gnn/
  data-file: graph_mappings_normed_edge_attrs_o96_h3_3.pt 

###################
#  MODEL BLOCK
###################
model:
  compile: False
  debug:
    # this will detect and trace back NaNs / Infs etc. but will slow down training
    anomaly-detection: False
  wandb:
    enabled: True
  neptune:
    enabled: False
  dataloader:
    num-workers:
      training: 8
      validation: 8
      inference: 1
    batch-size:
      training: 2
      validation: 2
      inference: 1

  # miscellaneous
  precision: 16-mixed  # "16" with Lightning < 2.0
  fast-dev-run: False
  # runs only N training batches [N = integer | null]
  # if null then we run through all the batches
  limit-batches:
    training: 20 #null
    validation: 20 #null
    test: 20
    predict: 20

  # parallel strategy
  # if running on a single device set to "null" [Lightning < 2] or "auto" [Lightning 2.0]
  strategy: auto # ddp_find_unused_parameters_false # ddp # auto  # ddp_find_unused_parameters_false

  # number of GPUs per node and number of nodes (for DDP)
  num-gpus: 1
  num-nodes: 1

  # training settings
  lead-time: 6
  max-epochs: 50
  learn-rate: 1.25e-4

  # specific GNN encoder settings
  encoder:
    num-layers: 5
    mapper-num-layers: 1
    num-heads: 8
    activation: gelu
    num-hidden-channels: 256
    num-out-channels: 256
    dropout: 0.

  # length of the "rollout" window (see Keisler's paper)
  rollout: 1

  # Keisler's three training rounds were:
  # Round 1. ~960,000 batches @ ~0.3 seconds per batch (4-step rollout)
  # Round 2. ~90,000 batches @ ~1.0 seconds per batch (8-step rollout)
  # Round 3. ~70,000 batches @ ~1.5 seconds per batch (12-step rollout)
  # Each batch is an N-step rollout, with batch_size=1
