{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "[AIFS] Installing AIFS",
  "steps": [
    {
      "file": "README.md",
      "description": "We want to install AIFS, for this we have to do a few steps:\n\n1. Create an environment\n2. Install the training dependencies and code\n3. Install pre-commit hooks for code quality\n\nYou may need to activate `conda` on your HPC if that's your environment manager:\n\n>> module load conda\n\nIf you click these commands, they will be put into your terminal for you!\n\nThen simply create an environment with Python:\n\n>> conda create -n aifs-dev python=3.10\n\nAnd activate the environment:\n\n>> conda activate aifs-dev\n\nLet's look at the dependencies!",
      "line": 5,
      "title": "Starting the installation of AIFS",
      "contents": "# AIFS\n\nGNN for for weather prediction trained on the ERA5 dataset\n\n## Installation\n\nWe have the `setup.py` set up for three use-cases currently:\n\n1. Inference\n2. Training\n3. Graph Surgery\n\nYou can install the smallest set of dependencies via\n\n```\npip install .\n```\n\nfor training, you need to install\n\n```\npip install .[training]\n```\n\nGraph shenanigans (like running the graph generation notebooks) need to have some extra packages here:\n```\npip install .[graph]\n```\n\n## Pre-commit Etiquette\n\nWe are using pre-commit hooks. You can find the config in `.pre-commit-config.yaml`, which automatically format new code and check with tools like `black` and `flake8`.\n\nWhen you first set up this repo, run:\n\n```\npre-commit install\n```\n\nTo enable these code formatters.\n\n**Please don't push changes directly to `master`**. Instead, PR changes from your own branch into `origin/master` so they get peer-reviewed.\n\n## How to run\n\n```shell\n$> cd <... your local clone dir ...>\n$> pip install -e .\n# this creates entry points for training and prediction\n$> aifs-train\n```\n"
    },
    {
      "file": "setup.py",
      "description": "We have minimal dependencies to run the models operational in inference only.\n\nThese can be installed with \n\n>> pip install .\n\nBut you probably want the training code instead!",
      "line": 29,
      "title": "Operational Requirements",
      "contents": "from pathlib import Path\n\nfrom setuptools import find_packages\nfrom setuptools import setup\n\n\ndef read(fname):\n    file_path = Path(Path(__file__).parent, fname)\n    return open(file_path, encoding=\"utf-8\").read()\n\n\nversion = None\nfor line in read(Path(\"aifs\", \"__init__.py\")).split(\"\\n\"):\n    if line.startswith(\"__version__\"):\n        version = line.split(\"=\")[-1].strip()[1:-1]\n\nassert version\n\nsetup(\n    name=\"aifs\",\n    version=version,\n    long_description=read(\"README.md\"),\n    long_description_content_type=\"text/markdown\",\n    license=\"Apache License Version 2.0\",\n    author=\"European Centre for Medium-Range Weather Forecasts (ECMWF)\",\n    author_email=\"ecmwf-authors@ecmwf.int\",\n    description=\"ERA5 forecasting with Graph Neural Networks\",\n    url=\"https://github.com/ecmwf-lab/aifs-mono\",\n    install_requires=[\n        \"torch>=2.0.1,<2.1\",\n        \"torch_geometric>=2.3.1\",\n        \"einops>=0.6.1\",\n    ],\n    extras_require={\n        \"training\": [\n            \"pytorch-lightning>=2.1.0\",\n            \"timm>=0.9.2\",\n            \"hydra-core>=1.3\",\n            \"matplotlib>=3.7.1\",\n            \"tqdm>=4.65.0\",\n            \"wandb>=0.15.0\",\n            \"zarr>=2.14.2\",\n            \"pre-commit>=3.3.3\",\n        ],\n        \"graph\": [\n            \"networkx>=3.1\",\n            \"h3>=3.7.6\",\n        ],\n    },\n    classifiers=[\n        \"Development Status :: 4 - Beta\",\n        \"Intended Audience :: Developers\",\n        \"Topic :: Scientific/Engineering :: Artificial Intelligence\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python :: 3.9\",\n    ],\n    packages=find_packages(),\n    package_data={\"\": [\"continents.json\"]},\n    include_package_data=True,\n    entry_points={\n        \"console_scripts\": [\n            \"aifs-train=aifs.train.train:main\",\n        ]\n    },\n)\n"
    },
    {
      "file": "setup.py",
      "description": "The training dependencies are installed with the `[training]` keyword.\n\n>> pip install .[training]\n\nAdditionally, since we usually want to work on the code, we install the \"editable\" version:\n\n>> pip install -e .[training]\n\nThis one install all the necessary dependencies you can see below and this repo itself!",
      "line": 34,
      "title": "Training and editable installs",
      "contents": "from pathlib import Path\n\nfrom setuptools import find_packages\nfrom setuptools import setup\n\n\ndef read(fname):\n    file_path = Path(Path(__file__).parent, fname)\n    return open(file_path, encoding=\"utf-8\").read()\n\n\nversion = None\nfor line in read(Path(\"aifs\", \"__init__.py\")).split(\"\\n\"):\n    if line.startswith(\"__version__\"):\n        version = line.split(\"=\")[-1].strip()[1:-1]\n\nassert version\n\nsetup(\n    name=\"aifs\",\n    version=version,\n    long_description=read(\"README.md\"),\n    long_description_content_type=\"text/markdown\",\n    license=\"Apache License Version 2.0\",\n    author=\"European Centre for Medium-Range Weather Forecasts (ECMWF)\",\n    author_email=\"ecmwf-authors@ecmwf.int\",\n    description=\"ERA5 forecasting with Graph Neural Networks\",\n    url=\"https://github.com/ecmwf-lab/aifs-mono\",\n    install_requires=[\n        \"torch>=2.0.1,<2.1\",\n        \"torch_geometric>=2.3.1\",\n        \"einops>=0.6.1\",\n    ],\n    extras_require={\n        \"training\": [\n            \"pytorch-lightning>=2.1.0\",\n            \"timm>=0.9.2\",\n            \"hydra-core>=1.3\",\n            \"matplotlib>=3.7.1\",\n            \"tqdm>=4.65.0\",\n            \"wandb>=0.15.0\",\n            \"zarr>=2.14.2\",\n            \"pre-commit>=3.3.3\",\n        ],\n        \"graph\": [\n            \"networkx>=3.1\",\n            \"h3>=3.7.6\",\n        ],\n    },\n    classifiers=[\n        \"Development Status :: 4 - Beta\",\n        \"Intended Audience :: Developers\",\n        \"Topic :: Scientific/Engineering :: Artificial Intelligence\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python :: 3.9\",\n    ],\n    packages=find_packages(),\n    package_data={\"\": [\"continents.json\"]},\n    include_package_data=True,\n    entry_points={\n        \"console_scripts\": [\n            \"aifs-train=aifs.train.train:main\",\n        ]\n    },\n)\n"
    },
    {
      "file": ".pre-commit-config.yaml",
      "description": "We are using a bunch of `pre-commit` hooks that ensure our code quality.\n\nYou can see which `pre-commit` hooke we use right here. It's a selection of `black` with the right setting, a linter, some security, and general file ettiquette. These pre-commit hooks will also block you from committing to the `main` branch.\n\n>> pre-commit install\n\nThese are automatically run every time you make a new commit.\n\nMost of these will automatically fix your files, but you'll have to stage them anew. This is to avoid breaking your repo irreversably, albeit two clicks more work.\n\nBut they make all of our lives easier in working together and ensuring highest-quality code.\n",
      "line": 25,
      "title": "Installing pre-commit hooks",
      "contents": "repos:\n-   repo: https://github.com/asottile/yesqa # Remove extraneous QA comments\n    rev: v1.5.0\n    hooks:\n    -   id: yesqa\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.4.0\n    hooks:\n    -   id: check-yaml # Check YAML files for syntax errors\n    -   id: debug-statements # Check for debugger imports and py37+ breakpoint()\n    -   id: end-of-file-fixer # Ensure files end in a newline\n    -   id: trailing-whitespace # Trailing whitespace checker\n    -   id: no-commit-to-branch # Prevent committing to main / master\n-   repo: https://github.com/asottile/reorder-python-imports # Reorder imports\n    rev: v3.10.0\n    hooks:\n    -   id: reorder-python-imports\n-   repo: https://github.com/asottile/pyupgrade # Upgrade Python syntax\n    rev: v3.7.0\n    hooks:\n    -   id: pyupgrade\n-   repo: https://github.com/psf/black # Format Python code\n    rev: 23.3.0\n    hooks:\n    - id: black\n      args: [--line-length=132]\n-   repo: https://github.com/astral-sh/ruff-pre-commit\n    rev: v0.0.275\n    hooks:\n    - id: ruff\n      args: [--line-length=132, '--ignore=E203', --fix, --exit-non-zero-on-fix]\n-   repo: https://github.com/pycqa/bandit # Check code for common security issues\n    rev: 1.7.5\n    hooks:\n    - id: bandit\n      args:\n      - -s\n      - B101\n-   repo: https://github.com/PyCQA/docformatter # Format docstrings\n    rev: v1.7.3\n    hooks:\n      - id: docformatter\n        args:\n        - -s numpy\n        - --black\n        - --in-place\n"
    },
    {
      "file": "README.md",
      "description": "You're good to go!\n\nGrab a GPU and get started with your first training and experiments!\n\nSimply run: `aifs-train`\n",
      "line": 44,
      "title": "You're good to go!",
      "contents": "# AIFS\n\nGNN for for weather prediction trained on the ERA5 dataset\n\n## Installation\n\nWe have the `setup.py` set up for three use-cases currently:\n\n1. Inference\n2. Training\n3. Graph Surgery\n\nYou can install the smallest set of dependencies via\n\n```\npip install .\n```\n\nfor training, you need to install\n\n```\npip install .[training]\n```\n\nGraph shenanigans (like running the graph generation notebooks) need to have some extra packages here:\n```\npip install .[graph]\n```\n\n## Pre-commit Etiquette\n\nWe are using pre-commit hooks. You can find the config in `.pre-commit-config.yaml`, which automatically format new code and check with tools like `black` and `flake8`.\n\nWhen you first set up this repo, run:\n\n```\npre-commit install\n```\n\nTo enable these code formatters.\n\n**Please don't push changes directly to `master`**. Instead, PR changes from your own branch into `origin/master` so they get peer-reviewed.\n\n## How to run\n\n```shell\n$> cd <... your local clone dir ...>\n$> pip install -e .\n# this creates entry points for training and prediction\n$> aifs-train\n```\n"
    }
  ]
}
