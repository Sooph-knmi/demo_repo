input:
  # zarr is also supported
  # the zarr data are under /ec/res4/scratch/syma/era5/o160/zarr/[pl | sfc]
  format: zarr
  resolution: o96
  training: 
    basedir: /lus/h2resw01/fws4/lb/project/ai-ml/panguweather-{resolution}
    filename: panguweather-{resolution}-1979-2015-6h.zarr
  validation:
    basedir: /lus/h2resw01/fws4/lb/project/ai-ml/panguweather-{resolution}
    filename: panguweather-{resolution}-2016-2017-6h.zarr
  test:
    basedir: /lus/h2resw01/fws4/lb/project/ai-ml/panguweather-{resolution}
    filename: panguweather-{resolution}-2016-2017-6h.zarr
  predict:
    basedir: /lus/h2resw01/fws4/lb/project/ai-ml/panguweather-{resolution}
    filename: panguweather-{resolution}-2016-2017-6h.zarr
  pl:
      names:
      # not used!
        - q
        - t
        - u
        - v
        - w
        - z
      levels:
        - 50
        - 100
        - 150
        - 200
        - 250
        - 300
        - 400
        - 500
        - 600
        - 700
        - 850
        - 925
        - 1000
  sfc:
      names:
      # not used!
        - msl
        - z
        - lsm
  # features that are not part of the forecast state
  # these are presumed to be located at the "end" of the flattened (bs, latlon, nvar) input tensor
  num-features: 98
  num-aux-features: 13  # all 2D fields
  loss-scaling-pl:
    - 0.6 #1
    - 6 #1
    - 0.8 #0.5
    - 0.5 #0.33
    - 0.01
    - 12 #1
  loss-scaling-sfc:
    - 0.1
    - 1
    - 0.1
    - 0.1
    - 0.1
    - 1
    - 0.1

metrics:
  - z_500
  - t_850
  - u_850
  - v_850
  - 2t
  - msl

plot:
#not yet used
  - q_850
  - t_850
  - u_850
  - v_850
  - w_850 
  - z_850
  - msl
  - 2t

###################
#  OUTPUT BLOCK
###################
output:
  basedir: /ec/res4/scratch/pamc/GNN/ERA5/{resolution}/
  logging:
    log-dir: logs
    log-interval: 100
  checkpoints:
    # model checkpoints: used to resume training or do inference
    ckpt-dir: checkpoints
  model:
    save-top-k: 5
    checkpoint-filename: aifs-ckpt-{epoch:02d}-{val_wmse:.4f}
  plots:
    plot-dir: plots

###################
#  GRAPH BLOCK
###################
graph:
  data-basedir: /ec/res4/hpcperm/pamc/gnn/
  data-file: graph_mappings_normed_edge_attrs_rot_{resolution}_h3_0_1_2.pt
  #graph_mappings_normed_edge_attrs_{resolution}_h3_2.pt 

###################
#  MODEL BLOCK
###################
model:
  # torch.compile is not working (yet), set this option to False 
  compile: False
  debug:
    # this will detect and trace back NaNs / Infs etc. but will slow down training
    anomaly-detection: False
  wandb:
    enabled: True
  neptune:
    enabled: False
  dataloader:
    num-workers:
      training: 8
      validation: 8
      test: 8
      predict: 8
    batch-size:
      training: 4
      validation: 4
      test: 4
      predict: 4

  # logger options (these probably come with some overhead)
  log-gradients: False
  log-parameters: False

  # resume training from a checkpoint
  warm-restart:
    enabled: False
    # path should be relative to the output:checkpoints:chkpt-dir, as defined above
    ckpt-path: 202304_1014/aifs-resolution=0-ckpt-epoch=49-val_wmse=0.010.ckpt
  
  # miscellaneous
  precision: 16-mixed  # "16" with Lightning < 2.0

  # use this for rapid debugging runs (push through a single batch)
  fast-dev-run: False

  # runs only N training batches [N = integer | null]
  # if null then we run through all the batches
  limit-batches:
    training: 20 #null
    validation: 20 #null
    test: 20
    predict: 20

  # parallel strategy
  # if running on a single device set to "null" [Lightning < 2] or "auto" [Lightning 2.0]
  strategy: auto

  # number of GPUs per node and number of nodes (for DDP)
  num-gpus: 4
  num-nodes: 1

  # training settings
  lead-time: 6
  max-epochs: 2 #50 #50
  learn-rate: 0.000125 #0.625e-4
  lr-iterations: 300000

  # gradient accumulation across K batches, K >= 1 (if K == 1 then no accumulation)
  # the effective batch size becomes num-devices * batch-size * k
  accum-grad-batches: 1

  # clipp gradients, 0 : don't clip, default algorithm: norm, alternative: value
  gradient-clip-val: 0
  gradient-clip-algorithm: value

  # stochastic weight averaging
  # https://pytorch.org/blog/stochastic-weight-averaging-in-pytorch/
  swa:
    enabled: False
    lr: 1.e-4

  # specific GNN encoder settings
  encoder:
    num-layers: 16
    mapper-num-layers: 1
    num-heads: 8
    activation: SiLU
    num-hidden-channels: 512
    num-out-channels: 512
    mlp-extra-layers: 0
    dropout: 0.
    era_trainable_size: 8
    h3_trainable_size: 8
    e2h_trainable_size: 8
    h2e_trainable_size: 8
    h2h_trainable_size: 8
  # length of the "rollout" window (see Keisler's paper)
  rollout: 1
  #Increase rollout every n epochs
  rollout_epoch_increment: 0
  #Maximum rollout to use
  rollout_max: 1

  # Keisler's three training rounds were:
  # Round 1. ~960,000 batches @ ~0.3 seconds per batch (4-step rollout)
  # Round 2. ~90,000 batches @ ~1.0 seconds per batch (8-step rollout)
  # Round 3. ~70,000 batches @ ~1.5 seconds per batch (12-step rollout)
  # Each batch is an N-step rollout, with batch_size=1
